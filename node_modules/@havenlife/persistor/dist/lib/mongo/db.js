var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
module.exports = function (PersistObjectTemplate) {
    /* Mongo implementation of save */
    PersistObjectTemplate.savePojoToMongo = function (obj, pojo, updateID, _txn, logger) {
        (logger || this.logger).debug({ component: 'persistor', module: 'db', activity: 'write' }, 'saving ' + obj.__template__.__name__ + ' to ' + obj.__template__.__collection__);
        var origVer = obj.__version__;
        obj.__version__ = obj.__version__ ? obj.__version__ + 1 : 1;
        pojo.__version__ = obj.__version__;
        var db = this.getDB(this.getDBAlias(obj.__template__.__collection__)).connection;
        var collection = db.collection(this.dealias(obj.__template__.__collection__));
        return (updateID ?
            collection.update(origVer ? { __version__: origVer, _id: updateID } : { _id: updateID }, pojo, { w: 1 }) :
            collection.save(pojo, { w: 1 }));
        // ).then (function (error, count) {
        //     if (error instanceof Array)
        //         count = error[0]; // Don't know why things are returned this way
        //     if (updateID && count == 0) {
        //         obj.__version__ = origVer;
        //         if (txn && txn.onUpdateConflict) {
        //             txn.onUpdateCoxnflict(pojo)
        //             txn.updateConflict =  new Error("Update Conflict");
        //         } else
        //             throw new Error("Update Conflict");
        //     }
        //     (logger || this.logger).debug({component: 'persistor', module: 'db', activity: 'write'}, 'saved ' + obj.__template__.__name__ + " to " + obj.__template__.__collection__);
        //     return true;
        // }.bind(this));
    };
    /**
     * Removes documents based on a query
     * @param {SuperType} template object to delete
     * @param {json} query mongo style queries
     * @param {object} _logger objecttemplate logger
     * @returns {object} commandresult of mongo client
     */
    PersistObjectTemplate.deleteFromMongoQuery = function (template, query, _logger) {
        var db = this.getDB(this.getDBAlias(template.__collection__)).connection;
        var collection = db.collection(this.dealias(template.__collection__));
        return collection.deleteMany(query, { w: 1, fsync: true });
    };
    PersistObjectTemplate.getPOJOFromMongoQuery = function (template, query, options, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var db, collection;
            return __generator(this, function (_a) {
                (logger || this.logger).debug({ component: 'persistor', module: 'db', activity: 'read' }, 'db.' + template.__collection__ + '.find({" + JSON.stringify(query) + "})');
                db = this.getDB(this.getDBAlias(template.__collection__)).connection;
                collection = db.collection(this.dealias(template.__collection__));
                options = options || {};
                if (!options.sort)
                    options.sort = { _id: 1 };
                if (typeof (options) === "function") {
                    return [2 /*return*/, collection.find(query, undefined, options).toArray()];
                }
                else {
                    return [2 /*return*/, collection.find(query, options).toArray()];
                }
                return [2 /*return*/];
            });
        });
    };
    PersistObjectTemplate.countFromMongoQuery = function (template, query) {
        var db = this.getDB(this.getDBAlias(template.__collection__)).connection;
        var collection = db.collection(this.dealias(template.__collection__));
        return collection.countDocuments(query);
    };
    PersistObjectTemplate.distinctFromMongoQuery = function (template, field, query) {
        var db = this.getDB(this.getDBAlias(template.__collection__)).connection;
        var collection = db.collection(this.dealias(template.__collection__));
        return collection.distinct(field, query);
    };
    PersistObjectTemplate.getPOJOFromMongoId = function (template, id, _cascade, _isTransient, idMap) {
        idMap = idMap || {};
        return this.getPOJOFromQuery(template, { _id: new this.ObjectID(id) }, idMap).then(function (pojos) {
            if (pojos.length > 0)
                return pojos[0];
            else
                return null;
        });
    };
};
