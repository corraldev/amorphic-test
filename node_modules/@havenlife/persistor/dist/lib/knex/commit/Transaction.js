"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
var Mappers_1 = require("./Mappers");
var LoggerHelpers_1 = require("../../LoggerHelpers");
var RollbackS3_1 = require("./RollbackS3");
var _ = require("underscore");
// Main Transaction executor
var Transaction;
(function (Transaction) {
    // Wrapper for transaction function
    function transaction(persistorDef, notifyChanges, txn, knexTxn, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var dirtyObjects, touchObjects, savedObjects, deletedObjects, deleteQueries, changeTracking, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dirtyObjects = txn.dirtyObjects, touchObjects = txn.touchObjects, savedObjects = txn.savedObjects, deletedObjects = txn.deletedObjects, deleteQueries = txn.deleteQueries;
                        changeTracking = {};
                        txn.knex = knexTxn;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 9, , 11]);
                        return [4 /*yield*/, preSave(txn, logger)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, saves(dirtyObjects, changeTracking, notifyChanges, txn, logger)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, deletes(deletedObjects, changeTracking, notifyChanges, txn, logger)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, deletesQueries(persistorDef, deleteQueries, txn, logger)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, touches(touchObjects, savedObjects, txn, logger)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, postSave(txn, changeTracking, logger)];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, commit(persistorDef, txn, knexTxn)];
                    case 8:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 9:
                        err_1 = _a.sent();
                        return [4 /*yield*/, rollback(persistorDef, logger, txn, knexTxn, err_1)];
                    case 10: return [2 /*return*/, _a.sent()];
                    case 11: return [2 /*return*/];
                }
            });
        });
    }
    Transaction.transaction = transaction;
    // Processor Handlers
    function preSave(txn, logger) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (txn.preSave) {
                    return [2 /*return*/, txn.preSave(txn, logger)];
                }
                else {
                    return [2 /*return*/, true];
                }
                return [2 /*return*/];
            });
        });
    }
    function saves(dirtyObjects, changeTracking, notifyChanges, txn, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var dirtyObjectsArray, refreshedDirtyArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dirtyObjectsArray = _.toArray(dirtyObjects);
                        return [4 /*yield*/, Promise.all(dirtyObjectsArray.map(function (obj) {
                                return Mappers_1.Mappers.saveMapper(obj, dirtyObjects, changeTracking, notifyChanges, txn, logger);
                            }))];
                    case 1:
                        _a.sent();
                        refreshedDirtyArray = _.toArray(dirtyObjects);
                        if (refreshedDirtyArray.length > 0) {
                            return [2 /*return*/, saves(dirtyObjects, changeTracking, notifyChanges, txn, logger)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    function deletes(deletedObjects, changeTracking, notifyChanges, txn, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var deletedObjectsArray, refreshedDeletedArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deletedObjectsArray = _.toArray(deletedObjects);
                        return [4 /*yield*/, Promise.all(deletedObjectsArray.map(function (obj) {
                                return Mappers_1.Mappers.deleteMapper(obj, deletedObjects, changeTracking, notifyChanges, txn, logger);
                            }))];
                    case 1:
                        _a.sent();
                        refreshedDeletedArray = _.toArray(deletedObjects);
                        if (refreshedDeletedArray.length > 0) {
                            return [2 /*return*/, deletes(deletedObjects, changeTracking, notifyChanges, txn, logger)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    function deletesQueries(persistorDef, deleteQueries, txn, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var deleteQueriesArray, refreshedDeleteQueriesArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deleteQueriesArray = _.toArray(deleteQueries);
                        return [4 /*yield*/, Promise.all(deleteQueriesArray.map(function (obj) {
                                return Mappers_1.Mappers.deleteQueryMapper(persistorDef, obj, deleteQueries, txn, logger);
                            }))];
                    case 1:
                        _a.sent();
                        refreshedDeleteQueriesArray = _.toArray(deleteQueries);
                        if (refreshedDeleteQueriesArray.length > 0) {
                            return [2 /*return*/, deletesQueries(persistorDef, deleteQueries, txn, logger)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    // Walk through the touched objects
    function touches(touchObjects, savedObjects, txn, logger) {
        return __awaiter(this, void 0, void 0, function () {
            var touchObjectsArray;
            var _this = this;
            return __generator(this, function (_a) {
                touchObjectsArray = _.toArray(touchObjects);
                return [2 /*return*/, Promise.all(touchObjectsArray.map(function (obj) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (obj.__template__ && obj.__template__.__schema__ && !savedObjects[obj.__id]) {
                                return [2 /*return*/, obj.persistTouch(txn, logger)];
                            }
                            return [2 /*return*/];
                        });
                    }); }))];
            });
        });
    }
    function postSave(txn, changeTracking, logger) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (txn.postSave) {
                    return [2 /*return*/, txn.postSave(txn, logger, changeTracking)];
                }
                return [2 /*return*/];
            });
        });
    }
    // And we are done with everything. Commit or throw an update conflict if seen
    function commit(persistorDef, txn, knexTxn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Reset global state, @TODO: remove this global state
                persistorDef.dirtyObjects = {};
                persistorDef.savedObjects = {};
                // Set through persistSaveKnex -> SaveKnexPojo -> checkUpdateResults
                if (txn.updateConflict) {
                    throw 'Update Conflict';
                }
                // commit knex transaction
                return [2 /*return*/, knexTxn.commit()];
            });
        });
    }
    // rollback if there's an error while processing any stage of this
    // including just generating the SQL queries / checking the versions
    // or even at the commit step
    // @returns innerError
    function rollback(persistorDef, logger, txn, knexTxn, err) {
        return __awaiter(this, void 0, void 0, function () {
            var deadlock, innerError, newLogObject, fromDeadlock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deadlock = err.toString().match(/deadlock detected$/i);
                        txn.innerError = err;
                        if (deadlock) {
                            innerError = new Error('Update Conflict');
                        }
                        else {
                            innerError = err;
                        }
                        if (!(txn.remoteObjects && txn.remoteObjects.size > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, RollbackS3_1.RollbackS3.rollbackS3(persistorDef, logger, txn)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, knexTxn.rollback(innerError)];
                    case 3:
                        _a.sent();
                        newLogObject = {
                            component: 'persistor',
                            module: 'api',
                            activity: 'end'
                        };
                        fromDeadlock = '';
                        if (deadlock) {
                            fromDeadlock = ' from deadlock';
                        }
                        LoggerHelpers_1.LoggerHelpers.debug(persistorDef, logger, newLogObject, "Transaction rolled back " + innerError.message + fromDeadlock);
                        return [2 /*return*/, innerError];
                }
            });
        });
    }
})(Transaction = exports.Transaction || (exports.Transaction = {}));
